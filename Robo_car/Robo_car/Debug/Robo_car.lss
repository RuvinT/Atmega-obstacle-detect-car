
Robo_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e5  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000155  00000000  00000000  0000040d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016b  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <sensor>:
    
   
	}
	}
void sensor(){
	DDRD = 0b11111011;
  7c:	8b ef       	ldi	r24, 0xFB	; 251
  7e:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	83 ed       	ldi	r24, 0xD3	; 211
  82:	90 e3       	ldi	r25, 0x30	; 48
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <sensor+0x8>
  88:	00 c0       	rjmp	.+0      	; 0x8a <sensor+0xe>
  8a:	00 00       	nop
	

		
		_delay_ms(50);
		
		GICR|=(1<<INT0);
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8b bf       	out	0x3b, r24	; 59
		MCUCR|=(1<<ISC00);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bf       	out	0x35, r24	; 53
		
		TCCR1A = 0;
  98:	1f bc       	out	0x2f, r1	; 47
		
		
		
		
		
		sei();
  9a:	78 94       	sei
		
		
		
		PORTD|=(1<<PIND0);
  9c:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	95 e0       	ldi	r25, 0x05	; 5
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <sensor+0x24>
		_delay_us(15);
		PORTD &=~(1<<PIND0);
  a4:	90 98       	cbi	0x12, 0	; 18
		
		COUNTA = pulse/58;
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pulse>
  aa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <pulse+0x1>
  ae:	6a e3       	ldi	r22, 0x3A	; 58
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	0e 94 65 00 	call	0xca	; 0xca <__divmodhi4>
  b6:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <_edata+0x1>
  ba:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
  be:	08 95       	ret

000000c0 <main>:
void sensor();



int main(void)
{ DDRA=0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
	
	while(1){
	
	sensor();
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <sensor>
	

  }  
    
   
	}
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0x4>

000000ca <__divmodhi4>:
  ca:	97 fb       	bst	r25, 7
  cc:	07 2e       	mov	r0, r23
  ce:	16 f4       	brtc	.+4      	; 0xd4 <__divmodhi4+0xa>
  d0:	00 94       	com	r0
  d2:	07 d0       	rcall	.+14     	; 0xe2 <__divmodhi4_neg1>
  d4:	77 fd       	sbrc	r23, 7
  d6:	09 d0       	rcall	.+18     	; 0xea <__divmodhi4_neg2>
  d8:	0e 94 79 00 	call	0xf2	; 0xf2 <__udivmodhi4>
  dc:	07 fc       	sbrc	r0, 7
  de:	05 d0       	rcall	.+10     	; 0xea <__divmodhi4_neg2>
  e0:	3e f4       	brtc	.+14     	; 0xf0 <__divmodhi4_exit>

000000e2 <__divmodhi4_neg1>:
  e2:	90 95       	com	r25
  e4:	81 95       	neg	r24
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	08 95       	ret

000000ea <__divmodhi4_neg2>:
  ea:	70 95       	com	r23
  ec:	61 95       	neg	r22
  ee:	7f 4f       	sbci	r23, 0xFF	; 255

000000f0 <__divmodhi4_exit>:
  f0:	08 95       	ret

000000f2 <__udivmodhi4>:
  f2:	aa 1b       	sub	r26, r26
  f4:	bb 1b       	sub	r27, r27
  f6:	51 e1       	ldi	r21, 0x11	; 17
  f8:	07 c0       	rjmp	.+14     	; 0x108 <__udivmodhi4_ep>

000000fa <__udivmodhi4_loop>:
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	a6 17       	cp	r26, r22
 100:	b7 07       	cpc	r27, r23
 102:	10 f0       	brcs	.+4      	; 0x108 <__udivmodhi4_ep>
 104:	a6 1b       	sub	r26, r22
 106:	b7 0b       	sbc	r27, r23

00000108 <__udivmodhi4_ep>:
 108:	88 1f       	adc	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	5a 95       	dec	r21
 10e:	a9 f7       	brne	.-22     	; 0xfa <__udivmodhi4_loop>
 110:	80 95       	com	r24
 112:	90 95       	com	r25
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	08 95       	ret

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
